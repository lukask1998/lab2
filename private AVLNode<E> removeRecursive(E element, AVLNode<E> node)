@Override
public void remove(E element) {

if (element == null) {
  throw new IllegalArgumentException("Element is null in remove(E element)");
}

root = removeRecursive(element, (AVLNode<E>) root);
//throw new UnsupportedOperationException("Studentams reikia realizuoti remove(E element)");
}

private AVLNode<E> removeRecursive(E element, AVLNode<E> node) {

if (node == null) {
  return node;
}

// Medyje ieškomas šalinamas elemento mazgas;
int cmp = c.compare(element, node.element);

if (cmp < 0) {
  node.setLeft(removeRecursive(element, node.getLeft()));

    if ((height(node.getLeft()) - height(node.getRight())) == 2) {
      int cmp2 = c.compare(element, node.getLeft().element);
      node = (cmp2 < 0) ? rightRotation(node) : doubleRightRotation(node);
  }
} else if (cmp > 0) {
  node.setRight(removeRecursive(element, node.getRight()));

  if ((height(node.getRight()) - height(node.getLeft())) == 2) {
      int cmp2 = c.compare(node.getRight().element, element);
      node = (cmp2 < 0) ? leftRotation(node) : doubleLeftRotation(node);
  }
} else if (node.getLeft() != null && node.getRight() != null) {


  node.element = ((AVLNode<E>) getMax(node.getLeft())).element;
  node.setLeft(removeRecursive(node.element, node.getLeft()));

  if ((height(node.getRight()) - height(node.getLeft())) == 2) {
      int cmp2 = c.compare(node.getRight().element, element);
      node = (cmp2 < 0) ? leftRotation(node) : doubleLeftRotation(node);
  }
  else if ((height(node.getLeft()) - height(node.getRight())) == 2) {
      int cmp2 = c.compare(element, node.getLeft().element);
      node = (cmp2 < 0) ? rightRotation(node) : doubleRightRotation(node);
  }
} 
else {
 node = node.getLeft() != null ? node.getLeft() : node.getRight();
  size--;
}
if (node != null){
  node.height = Math.max(height(node.getLeft()), height(node.getRight())) + 1;
}

return node;

    }
